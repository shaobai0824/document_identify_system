"""Initial database schema with cross-platform UUID support

Revision ID: f6d86428f428
Revises: 
Create Date: 2025-09-08 20:14:44.065509

"""
import uuid
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID as PostgresUUID
from sqlalchemy.types import CHAR, TypeDecorator

from alembic import op


class GUID(TypeDecorator):
    """
    跨資料庫相容的 UUID 類型
    在 PostgreSQL 使用 UUID，在 SQLite 使用 CHAR(36)
    """
    impl = CHAR
    cache_ok = True

    def load_dialect_impl(self, dialect):
        if dialect.name == 'postgresql':
            return dialect.type_descriptor(PostgresUUID())
        else:
            return dialect.type_descriptor(CHAR(36))

    def process_bind_param(self, value, dialect):
        if value is None:
            return value
        elif dialect.name == 'postgresql':
            return str(value)
        else:
            if not isinstance(value, uuid.UUID):
                return str(value)
            else:
                return str(value)

    def process_result_value(self, value, dialect):
        if value is None:
            return value
        else:
            if not isinstance(value, uuid.UUID):
                return uuid.UUID(value)
            return value


# revision identifiers, used by Alembic.
revision: str = 'f6d86428f428'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('documents',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=False),
    sa.Column('original_filename', sa.String(length=255), nullable=False),
    sa.Column('content_type', sa.String(length=100), nullable=False),
    sa.Column('file_size', sa.Integer(), nullable=False),
    sa.Column('file_hash', sa.String(length=64), nullable=False),
    sa.Column('storage_path', sa.String(length=500), nullable=False),
    sa.Column('storage_provider', sa.String(length=50), nullable=True),
    sa.Column('status', sa.Enum('UPLOADED', 'PROCESSING', 'OCR_COMPLETED', 'VERIFIED', 'FAILED', 'ARCHIVED', name='documentstatus'), nullable=True),
    sa.Column('processing_progress', sa.Float(), nullable=True),
    sa.Column('ocr_text', sa.Text(), nullable=True),
    sa.Column('ocr_confidence', sa.Float(), nullable=True),
    sa.Column('ocr_metadata', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_document_hash', 'documents', ['file_hash'], unique=False)
    op.create_index('idx_document_status_created', 'documents', ['status', 'created_at'], unique=False)
    op.create_index(op.f('ix_documents_created_at'), 'documents', ['created_at'], unique=False)
    op.create_index(op.f('ix_documents_file_hash'), 'documents', ['file_hash'], unique=False)
    op.create_index(op.f('ix_documents_id'), 'documents', ['id'], unique=False)
    op.create_index(op.f('ix_documents_status'), 'documents', ['status'], unique=False)
    op.create_table('templates',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('template_type', sa.Enum('IDENTITY_CARD', 'PASSPORT', 'DRIVER_LICENSE', 'UTILITY_BILL', 'BANK_STATEMENT', 'CUSTOM', name='templatetype'), nullable=False),
    sa.Column('version', sa.String(length=20), nullable=True),
    sa.Column('field_definitions', sa.JSON(), nullable=False),
    sa.Column('validation_rules', sa.JSON(), nullable=True),
    sa.Column('ocr_regions', sa.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('confidence_threshold', sa.Float(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.Column('success_rate', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_template_type_active', 'templates', ['template_type', 'is_active'], unique=False)
    op.create_index(op.f('ix_templates_created_at'), 'templates', ['created_at'], unique=False)
    op.create_index(op.f('ix_templates_id'), 'templates', ['id'], unique=False)
    op.create_index(op.f('ix_templates_is_active'), 'templates', ['is_active'], unique=False)
    op.create_index(op.f('ix_templates_template_type'), 'templates', ['template_type'], unique=False)
    op.create_table('webhook_deliveries',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('webhook_url', sa.String(length=500), nullable=False),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=False),
    sa.Column('resource_id', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('response_status', sa.Integer(), nullable=True),
    sa.Column('response_headers', sa.JSON(), nullable=True),
    sa.Column('response_body', sa.Text(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_webhook_event_type', 'webhook_deliveries', ['event_type'], unique=False)
    op.create_index('idx_webhook_resource', 'webhook_deliveries', ['resource_id'], unique=False)
    op.create_index('idx_webhook_status_created', 'webhook_deliveries', ['status', 'created_at'], unique=False)
    op.create_index(op.f('ix_webhook_deliveries_created_at'), 'webhook_deliveries', ['created_at'], unique=False)
    op.create_index(op.f('ix_webhook_deliveries_event_type'), 'webhook_deliveries', ['event_type'], unique=False)
    op.create_index(op.f('ix_webhook_deliveries_id'), 'webhook_deliveries', ['id'], unique=False)
    op.create_index(op.f('ix_webhook_deliveries_resource_id'), 'webhook_deliveries', ['resource_id'], unique=False)
    op.create_index(op.f('ix_webhook_deliveries_status'), 'webhook_deliveries', ['status'], unique=False)
    op.create_table('task_records',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('task_id', sa.String(length=255), nullable=False),
    sa.Column('task_name', sa.String(length=200), nullable=False),
    sa.Column('task_type', sa.String(length=100), nullable=False),
    sa.Column('document_id', GUID(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('result', sa.JSON(), nullable=True),
    sa.Column('error_info', sa.JSON(), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('execution_time_ms', sa.Integer(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_task_document', 'task_records', ['document_id'], unique=False)
    op.create_index('idx_task_type_status', 'task_records', ['task_type', 'status'], unique=False)
    op.create_index(op.f('ix_task_records_created_at'), 'task_records', ['created_at'], unique=False)
    op.create_index(op.f('ix_task_records_document_id'), 'task_records', ['document_id'], unique=False)
    op.create_index(op.f('ix_task_records_id'), 'task_records', ['id'], unique=False)
    op.create_index(op.f('ix_task_records_status'), 'task_records', ['status'], unique=False)
    op.create_index(op.f('ix_task_records_task_id'), 'task_records', ['task_id'], unique=True)
    op.create_index(op.f('ix_task_records_task_type'), 'task_records', ['task_type'], unique=False)
    op.create_table('verification_records',
    sa.Column('id', GUID(), nullable=False),
    sa.Column('document_id', GUID(), nullable=False),
    sa.Column('template_id', GUID(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'PASS', 'FAIL', 'MANUAL_REVIEW', name='verificationstatus'), nullable=True),
    sa.Column('overall_confidence', sa.Float(), nullable=True),
    sa.Column('field_results', sa.JSON(), nullable=True),
    sa.Column('extracted_data', sa.JSON(), nullable=True),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('warnings', sa.JSON(), nullable=True),
    sa.Column('requires_manual_review', sa.Boolean(), nullable=True),
    sa.Column('manual_review_notes', sa.Text(), nullable=True),
    sa.Column('reviewed_by', sa.String(length=100), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.ForeignKeyConstraint(['template_id'], ['templates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_verification_document_template', 'verification_records', ['document_id', 'template_id'], unique=False)
    op.create_index('idx_verification_manual_review', 'verification_records', ['requires_manual_review'], unique=False)
    op.create_index('idx_verification_status_created', 'verification_records', ['status', 'created_at'], unique=False)
    op.create_index(op.f('ix_verification_records_created_at'), 'verification_records', ['created_at'], unique=False)
    op.create_index(op.f('ix_verification_records_document_id'), 'verification_records', ['document_id'], unique=False)
    op.create_index(op.f('ix_verification_records_id'), 'verification_records', ['id'], unique=False)
    op.create_index(op.f('ix_verification_records_requires_manual_review'), 'verification_records', ['requires_manual_review'], unique=False)
    op.create_index(op.f('ix_verification_records_status'), 'verification_records', ['status'], unique=False)
    op.create_index(op.f('ix_verification_records_template_id'), 'verification_records', ['template_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_verification_records_template_id'), table_name='verification_records')
    op.drop_index(op.f('ix_verification_records_status'), table_name='verification_records')
    op.drop_index(op.f('ix_verification_records_requires_manual_review'), table_name='verification_records')
    op.drop_index(op.f('ix_verification_records_id'), table_name='verification_records')
    op.drop_index(op.f('ix_verification_records_document_id'), table_name='verification_records')
    op.drop_index(op.f('ix_verification_records_created_at'), table_name='verification_records')
    op.drop_index('idx_verification_status_created', table_name='verification_records')
    op.drop_index('idx_verification_manual_review', table_name='verification_records')
    op.drop_index('idx_verification_document_template', table_name='verification_records')
    op.drop_table('verification_records')
    op.drop_index(op.f('ix_task_records_task_type'), table_name='task_records')
    op.drop_index(op.f('ix_task_records_task_id'), table_name='task_records')
    op.drop_index(op.f('ix_task_records_status'), table_name='task_records')
    op.drop_index(op.f('ix_task_records_id'), table_name='task_records')
    op.drop_index(op.f('ix_task_records_document_id'), table_name='task_records')
    op.drop_index(op.f('ix_task_records_created_at'), table_name='task_records')
    op.drop_index('idx_task_type_status', table_name='task_records')
    op.drop_index('idx_task_document', table_name='task_records')
    op.drop_table('task_records')
    op.drop_index(op.f('ix_webhook_deliveries_status'), table_name='webhook_deliveries')
    op.drop_index(op.f('ix_webhook_deliveries_resource_id'), table_name='webhook_deliveries')
    op.drop_index(op.f('ix_webhook_deliveries_id'), table_name='webhook_deliveries')
    op.drop_index(op.f('ix_webhook_deliveries_event_type'), table_name='webhook_deliveries')
    op.drop_index(op.f('ix_webhook_deliveries_created_at'), table_name='webhook_deliveries')
    op.drop_index('idx_webhook_status_created', table_name='webhook_deliveries')
    op.drop_index('idx_webhook_resource', table_name='webhook_deliveries')
    op.drop_index('idx_webhook_event_type', table_name='webhook_deliveries')
    op.drop_table('webhook_deliveries')
    op.drop_index(op.f('ix_templates_template_type'), table_name='templates')
    op.drop_index(op.f('ix_templates_is_active'), table_name='templates')
    op.drop_index(op.f('ix_templates_id'), table_name='templates')
    op.drop_index(op.f('ix_templates_created_at'), table_name='templates')
    op.drop_index('idx_template_type_active', table_name='templates')
    op.drop_table('templates')
    op.drop_index(op.f('ix_documents_status'), table_name='documents')
    op.drop_index(op.f('ix_documents_id'), table_name='documents')
    op.drop_index(op.f('ix_documents_file_hash'), table_name='documents')
    op.drop_index(op.f('ix_documents_created_at'), table_name='documents')
    op.drop_index('idx_document_status_created', table_name='documents')
    op.drop_index('idx_document_hash', table_name='documents')
    op.drop_table('documents')
    # ### end Alembic commands ###
